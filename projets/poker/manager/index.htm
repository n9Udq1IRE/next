<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <style media="screen">
    body {
      margin: 0;
      margin-top: 16px;
      font-family: 'Ubuntu';
      background-color: black;
    }

    .Tournament {
      cursor: pointer;
      font-size: 12pt;
      color: gray;
      background-color: rgb(33, 37, 43);
      border: 20px solid rgb(33, 37, 43);
    }

    .TournamentSelected {
      color: white;
      background-color: rgb(42, 46, 54);
      border: 20px solid rgb(42, 46, 54);
    }

    .Blinds {
      margin-top: 40px;
      font-size: 80pt;
      font-weight: bold;
      color: white;
      text-align: center;
      font-family: Arial;
    }

    .BlindsNext {
      font-size: 40pt;
      color: gray;
    }

    .Time {
      margin-top: 40px;
      margin-bottom: 40px;
      font-size: 60pt;
      font-weight: bold;
      color: white;
      text-align: center;
    }

    .TimeNext {
      color: gray;
    }
    </style>
    <script type="text/javascript">
    'use strict';

    class Break {
      constructor() {
        this.begin = null;
      }
      start() {
        this.end = null;
        this.begin = new Date();
      }
      stop() {
        if (this.begin != null) {
          this.end = new Date();
        }
      }
      duration() {
        var d = 0;
        if (this.begin != null) {
          if (this.end != null) {
            d = this.end - this.begin;
          }
          else {
            d = new Date() - this.begin;
          }
        }

        return d;
      }
    }

    class Tournament {
      constructor() {
        this.start = null;
        this.breaks = [];
      }
      breakDuration() {
        var duration = 0;
        var indexBreak = 0;
        while (indexBreak < this.breaks.length) {
          duration += this.breaks[indexBreak].duration();
          indexBreak++;
        }

        return duration;
      }
    }

    class PokerManager {
      constructor() {
        this.ihm = document.getElementById('PokerManager');
        this.tournaments = [];
        this.tournaments.push(new Tournament());
        this.currentTournament = 0;
        this.duration = 600; // Secondes
        this.modeMulti = false;
        /*
          Source : http://www.caen-poker.com/dossier/structure_poker/structure_poker.html
          Stack conseillé : 10.000
        */
        this.structure = [
          { "smallBlind": 25, "ante": 0, "chipRace": 0 },
          { "smallBlind": 50, "ante": 0, "chipRace": 0 },
          { "smallBlind": 75, "ante": 0, "chipRace": 0 },
          { "smallBlind": 100, "ante": 0, "chipRace": 0 },
          { "smallBlind": 150, "ante": 0, "chipRace": 0 },
          { "smallBlind": 150, "ante": 25, "chipRace": 0 },
          { "smallBlind": 200, "ante": 50, "chipRace": 0 },
          { "smallBlind": 300, "ante": 75, "chipRace": 25 },
          { "smallBlind": 400, "ante": 100, "chipRace": 0 },
          { "smallBlind": 500, "ante": 100, "chipRace": 0 },
          { "smallBlind": 600, "ante": 100, "chipRace": 0 },
          { "smallBlind": 800, "ante": 200, "chipRace": 0 },
          { "smallBlind": 1000, "ante": 200, "chipRace": 0 },
          { "smallBlind": 1200, "ante": 300, "chipRace": 0 },
          { "smallBlind": 1500, "ante": 300, "chipRace": 0 },
          { "smallBlind": 2000, "ante": 400, "chipRace": 100 },
          { "smallBlind": 2500, "ante": 500, "chipRace": 0 },
          { "smallBlind": 3000, "ante": 500, "chipRace": 500 },
          { "smallBlind": 4000, "ante": 1000, "chipRace": 0 },
          { "smallBlind": 5000, "ante": 1000, "chipRace": 0 },
          { "smallBlind": 6000, "ante": 1000, "chipRace": 0 },
          { "smallBlind": 8000, "ante": 2000, "chipRace": 0 },
          { "smallBlind": 10000, "ante": 2000, "chipRace": 0 },
          { "smallBlind": 15000, "ante": 3000, "chipRace": 0 },
          { "smallBlind": 20000, "ante": 4000, "chipRace": 0 },
          { "smallBlind": 25000, "ante": 5000, "chipRace": 0 }
        ];
      }
      ihmDraw() {
        if (this.ihm != null) {
          this.ihm.innerHTML = "";
          // ADD
          var divTournaments = document.createElement('div');
          var index = 0;
          while (index < this.tournaments.length) {
            var divTournament = document.createElement('span');
            var classProperty = "Tournament";
            if (index == this.currentTournament) {
              classProperty += " TournamentSelected";
            }
            divTournament.setAttribute('class', classProperty);
            divTournament.setAttribute('onClick', 'pokerManager.tournamentSelect(' + (index) + ');');
            divTournament.innerHTML = "PokerManager#" + (index + 1);
            divTournaments.appendChild(divTournament);
            index++;
          }
          if (this.modeMulti) {
            // ADD
            var divTournamentNew = document.createElement('span');
            divTournamentNew.setAttribute('class', 'Tournament');
            divTournamentNew.setAttribute('onClick', 'pokerManager.tournamentAdd();');
            divTournamentNew.innerHTML = "ADD";
            divTournaments.appendChild(divTournamentNew);
            // DEL
            var divTournamentDel = document.createElement('span');
            divTournamentDel.setAttribute('class', 'Tournament');
            divTournamentDel.setAttribute('onClick', 'pokerManager.tournamentDel();');
            divTournamentDel.innerHTML = "DEL";
            divTournaments.appendChild(divTournamentDel);
          }
          this.ihm.appendChild(divTournaments);
          this.tournamentDraw();
        }
      }
      tournamentDraw() {
        var tournament = this.tournaments[this.currentTournament];
        var indexStructure = 0;
        var duration = 0;
        if (tournament.start != null) {
          duration = new Date() - tournament.start - tournament.breakDuration();
          indexStructure = Math.floor(duration / 1000 / this.duration);
          if (indexStructure > this.structure.length - 1) {
            indexStructure = this.structure.length - 1;
          }
        }
        // Time Début
        var divTime = document.getElementById('divTime');
        if (divTime == null) {
          divTime = document.createElement('div');
          divTime.setAttribute('id', 'divTime');
          divTime.setAttribute('class', 'Time');
          divTime.setAttribute('onClick', 'pokerManager.enter();');
          this.ihm.appendChild(divTime);
          divTime = document.getElementById('divTime');
        }
        divTime.innerHTML = this.formatTimeHHMMSS(duration + 999);
        // Time Fin
        var divBlinds = document.getElementById('divBlinds');
        if (divBlinds == null) {
          divBlinds = document.createElement('div');
          divBlinds.setAttribute('id', 'divBlinds');
          divBlinds.setAttribute('class', 'Blinds');
          divBlinds.setAttribute('onClick', 'pokerManager.enter();');
          this.ihm.appendChild(divBlinds);
          divBlinds = document.getElementById('divBlinds');
        }
        divBlinds.innerHTML = 'Blinds<br />' + this.formatBlind(this.structure[indexStructure].smallBlind) + ' / ' + this.formatBlind(this.structure[indexStructure].smallBlind * 2);
        if (this.structure[indexStructure].ante != 0) {
          divBlinds.innerHTML += ' Ante ' + this.formatBlind(this.structure[indexStructure].ante);
        }
        // TimeNext Début
        var divTimeNext = document.getElementById('divTimeNext');
        if (divTimeNext == null) {
          divTimeNext = document.createElement('div');
          divTimeNext.setAttribute('id', 'divTimeNext');
          divTimeNext.setAttribute('class', 'Time TimeNext');
          divTimeNext.setAttribute('onClick', 'pokerManager.enter();');
          this.ihm.appendChild(divTimeNext);
          divTimeNext = document.getElementById('divTimeNext');
        }
        if (indexStructure < this.structure.length - 1) {
          divTimeNext.innerHTML = this.formatTimeMMSS((indexStructure + 1) * this.duration * 1000 - duration);
        }
        else {
          divTimeNext.innerHTML = '-';
        }
        // Time Fin
        var indexStructureNext = indexStructure;
        if (indexStructureNext < this.structure.length - 1) {
          indexStructureNext++;
        }
        var divBlindsNext = document.getElementById('divBlindsNext');
        if (divBlindsNext == null) {
          divBlindsNext = document.createElement('div');
          divBlindsNext.setAttribute('id', 'divBlindsNext');
          divBlindsNext.setAttribute('class', 'Blinds BlindsNext');
          divBlindsNext.setAttribute('onClick', 'pokerManager.enter();');
          this.ihm.appendChild(divBlindsNext);
          divBlindsNext = document.getElementById('divBlindsNext');
        }
        divBlindsNext.innerHTML = 'Next blinds<br />' + this.formatBlind(this.structure[indexStructureNext].smallBlind) + ' / ' + this.formatBlind(this.structure[indexStructureNext].smallBlind * 2);
        if (this.structure[indexStructureNext].ante != 0) {
          divBlindsNext.innerHTML += ' Ante ' + this.formatBlind(this.structure[indexStructureNext].ante);
        }
        setTimeout(function () {
          pokerManager.tournamentDraw();
        }, 1000);
      }
      formatBlind(blind) {
        var ret = blind.toLocaleString();

        return ret;
      }
      formatTimeHHMMSS(ms) {
        var date = new Date(ms);
        var hh = date.getUTCHours();
        var mm = date.getUTCMinutes();
        var ss = date.getSeconds();
        if (hh < 10) {hh = "0"+hh;}
        if (mm < 10) {mm = "0"+mm;}
        if (ss < 10) {ss = "0"+ss;}

        return hh+":"+mm+":"+ss;
      }
      formatTimeMMSS(ms) {
        var date = new Date(ms);
        var hh = date.getUTCHours();
        var mm = date.getUTCMinutes();
        var ss = date.getSeconds();
        if (hh < 10) {hh = "0"+hh;}
        if (mm < 10) {mm = "0"+mm;}
        if (ss < 10) {ss = "0"+ss;}

        return mm+":"+ss;
      }
      tournamentAdd() {
        if (this.tournaments.length < 8) {
          this.tournaments.push(new Tournament());
          this.currentTournament = this.tournaments.length - 1;
          this.ihmDraw();
        }
      }
      tournamentDel() {
        this.tournaments.splice(this.currentTournament, 1);
        if (this.tournaments.length == 0) {
          this.tournaments.push(new Tournament());
        }
        this.currentTournament = 0;
        this.ihmDraw();
      }
      tournamentSelect(indexTournament) {
        this.currentTournament = indexTournament;
        this.ihmDraw();
      }
      enter() {
        var tournament = this.tournaments[this.currentTournament];
        if (tournament.start == null) {
          tournament.start = new Date();
        }
        else {
          if (tournament.breaks.length == 0) {
            var myBreak = new Break();
            myBreak.start();
            tournament.breaks.push(myBreak);
          }
          else {
            var lastBreak = tournament.breaks[tournament.breaks.length - 1];
            if (lastBreak.begin != null && lastBreak.end != null) {
              var myBreak = new Break();
              myBreak.start();
              tournament.breaks.push(myBreak);
            }
            else {
              lastBreak.stop();
            }
          }
        }
      }
    }

    var pokerManager = null;

    window.onload = function() {
      pokerManager = new PokerManager();
      pokerManager.ihmDraw();
    }

    window.onkeypress = function (e) {
      switch (e.charCode) {
        case 13:
          pokerManager.enter();
          break;
        default:
      }
    }
    </script>
    <title>PokerManager</title>
  </head>
  <body>
    <div id="PokerManager"></div>
  </body>
</html>
